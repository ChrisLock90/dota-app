{"version":3,"sources":["Components/DotaApi.js","Components/HeroList.js","App.js","serviceWorker.js","index.js"],"names":["DotaComponent","props","state","topPlayers","heroDetails","hero","LaneRoles","fetch","this","id","then","response","json","setState","catch","err","console","log","getTopPlayers","name","localized_name","heroInfo","primary_attr","attack_type","roles","legs","players","heroName","rankings","undefined","personaname","showTopPlayers","React","Component","HeroList","heroes","sort","a","b","textA","toUpperCase","textB","getHeroData","heroNames","map","item","key","class","onClick","GetId","bind","selectedHero","DotaApi","find","x","HeroId","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b46726aa.chunk.js","sourcesContent":["import React, {} from 'react';\r\n\r\nclass DotaComponent extends React.Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {        \r\n        topPlayers: [],\r\n        heroDetails: props.hero,\r\n        LaneRoles: []\r\n    };\r\n}\r\n\r\ngetTopPlayers(){\r\n    fetch(\"https://api.opendota.com/api/rankings?hero_id=\" + this.state.heroDetails.id, {\r\n        \"method\": \"GET\"\r\n        }\r\n    )\r\n    .then(response => response.json())\r\n    .then(response => {\r\n        this.setState({             \r\n            topPlayers: response \r\n        })\r\n    })\r\n    .catch(err => {console.log(err)\r\n    });\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.getTopPlayers();\r\n}\r\n\r\ncomponentWillReceiveProps(props){\r\n    this.setState({ heroDetails: props.hero })\r\n}\r\n\r\nrender() {    \r\n    return (\r\n        <div>            \r\n            { heroName(this.state.heroDetails) }\r\n            { heroInformation(this.state.heroDetails) }\r\n            { showTopPlayers(this.state.topPlayers, this.state.heroDetails) }         \r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default DotaComponent;\r\n\r\nfunction heroName(name) {\r\n    return <h2>{ name.localized_name } Information</h2>\r\n}\r\n    \r\nfunction heroInformation(heroInfo) { \r\n    return(\r\n        <div>\r\n            <label>Primary Attribute: </label>{ heroInfo.primary_attr }<p />             \r\n            <label>Attack Type: </label>{ heroInfo.attack_type }<p />             \r\n            <label>Roles: </label>{ heroInfo.roles }<p />         \r\n            <label>Legs: </label>{ heroInfo.legs }<p />\r\n        </div>        \r\n    );\r\n}\r\n\r\nfunction showTopPlayers(players, heroName) {   \r\n    if(players.rankings !== null && players.rankings !== undefined) {\r\n    return(\r\n        <div>\r\n            <h2>Current Top 5 { heroName.localized_name } Players</h2><p /> \r\n            <label>1. </label>{ players.rankings[0].personaname }<p />\r\n            <label>2. </label>{ players.rankings[1].personaname }<p />\r\n            <label>3. </label>{ players.rankings[2].personaname }<p />\r\n            <label>4. </label>{ players.rankings[3].personaname }<p />\r\n            <label>5. </label>{ players.rankings[4].personaname }<p />\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\n\r\n\r\n","import React, {} from 'react';\r\nimport DotaApi from './DotaApi';\r\n\r\nclass HeroList extends React.Component\r\n{\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n        heroes: [],\r\n        id: -1\r\n    };    \r\n}\r\n  \r\ngetHeroData() {\r\n    fetch(\"https://api.opendota.com/api/heroes?api_key=B05481EB573059BDB0136454432E27F6\", {\r\n        \"method\": \"GET\"\r\n        }\r\n    )\r\n    .then(response => response.json())    \r\n    .then(response => {        \r\n        SortList(response);\r\n        this.setState({             \r\n            heroes: response\r\n        })\r\n    })\r\n    .catch(err => {console.log(err);\r\n    });    \r\n}\r\n\r\ncomponentDidMount(){\r\n    this.getHeroData();    \r\n}\r\n\r\nGetId(id){\r\n    this.setState({\r\n        id: id\r\n    })\r\n     \r\n}\r\n\r\nrender() {    \r\n\r\n    const heroNames = this.state.heroes.map((item, key) => <button class=\"btn-group\" onClick={ this.GetId.bind(this, item.id) } key={item.id}>{item.localized_name}</button>);\r\n    \r\n    return (       \r\n        <div>\r\n        <ul>{ heroNames }</ul>        \r\n        { HeroId(this.state.heroes, this.state.id) }\r\n        </div>\r\n    );\r\n}\r\n\r\n}\r\n\r\nexport default HeroList;\r\n//pass clicked id to DotaApi.js\r\n//function for when we have selected a hero id\r\nfunction HeroId(selectedHero, id){\r\n    if(id !== -1)\r\n    {                \r\n        return <div><DotaApi hero = { selectedHero.find(x => x.id === id) } /></div> \r\n    }\r\n}\r\n\r\nfunction SortList(heroNameArray){\r\n    heroNameArray.sort(function(a, b) {\r\n        var textA = a.localized_name.toUpperCase();\r\n        var textB = b.localized_name.toUpperCase();\r\n        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n    });\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport HeroList from './Components/HeroList';\r\n\r\nclass App extends React.Component {    \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"Dota 2 Hero App\">\r\n        <div>                                                               \r\n          <div><HeroList /></div>          \r\n        </div>           \r\n      </div>        \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}